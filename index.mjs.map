{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/assign.js","../lib/strided.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number-float64-base-to-float32';\nimport Complex64 from '@stdlib/complex-float32-ctor';\nimport realf from '@stdlib/complex-float32-real';\nimport imagf from '@stdlib/complex-float32-imag';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*\n* var z2 = new Complex64( -2.0, 1.0 );\n* // returns <Complex64>\n*\n* var out = mul( z1, z2 );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns -13.0\n*\n* var im = imagf( out );\n* // returns -1.0\n*/\nfunction mul( z1, z2 ) {\n\tvar re1 = realf( z1 );\n\tvar re2 = realf( z2 );\n\tvar im1 = imagf( z1 );\n\tvar im2 = imagf( z2 );\n\tvar re = f32(re1*re2) - f32(im1*im2);\n\tvar im = f32(re1*im2) + f32(im1*re2);\n\treturn new Complex64( f32( re ), f32( im ) );\n}\n\n\n// EXPORTS //\n\nexport default mul;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision complex floating-point numbers and assigns results to a provided output array.\n*\n* @param {number} re1 - real component of the first complex number\n* @param {number} im1 - imaginary component of the first complex number\n* @param {number} re2 - real component of the second complex number\n* @param {number} im2 - imaginary component of the second complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var out = assign( 5.0, 3.0, -2.0, 1.0, new Float32Array( 2 ), 1, 0 );\n* // returns <Float32Array>[ -13.0, -1.0 ]\n*/\nfunction assign( re1, im1, re2, im2, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = f32(re1*re2) - f32(im1*im2);\n\tout[ offsetOut+strideOut ] = f32(re1*im2) + f32(im1*re2);\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision complex floating-point numbers stored in real-valued strided array views and assigns results to a provided strided output array.\n*\n* @param {Float32Array} z1 - first complex number view\n* @param {integer} strideZ1 - stride length for `z1`\n* @param {NonNegativeInteger} offsetZ1 - starting index for `z1`\n* @param {Float32Array} z2 - second complex number view\n* @param {integer} strideZ2 - stride length for `z2`\n* @param {NonNegativeInteger} offsetZ2 - starting index for `z2`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var z1 = new Float32Array( [ 5.0, 3.0 ] );\n* var z2 = new Float32Array( [ -2.0, 1.0 ] );\n*\n* var out = strided( z1, 1, 0, z2, 1, 0, new Float32Array( 2 ), 1, 0 );\n* // returns <Float32Array>[ -13.0, -1.0 ]\n*/\nfunction strided( z1, strideZ1, offsetZ1, z2, strideZ2, offsetZ2, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar re1 = z1[ offsetZ1 ];\n\tvar im1 = z1[ offsetZ1+strideZ1 ];\n\tvar re2 = z2[ offsetZ2 ];\n\tvar im2 = z2[ offsetZ2+strideZ2 ];\n\tout[ offsetOut ] = f32(re1*re2) - f32(im1*im2);\n\tout[ offsetOut+strideOut ] = f32(re1*im2) + f32(im1*re2);\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multiply two single-precision complex floating-point numbers.\n*\n* @module @stdlib/complex-float32-base-mul\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n* import mul from '@stdlib/complex-float32-base-mul';\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*\n* var z2 = new Complex64( -2.0, 1.0 );\n* // returns <Complex64>\n*\n* var out = mul( z1, z2 );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns -13.0\n*\n* var im = imagf( out );\n* // returns -1.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n"],"names":["mul","z1","z2","re1","realf","re2","im1","imagf","im2","re","f32","im","Complex64","assign","out","strideOut","offsetOut","strided","strideZ1","offsetZ1","strideZ2","offsetZ2","setReadOnly","main"],"mappings":";;8fAyDA,SAASA,EAAKC,EAAIC,GACjB,IAAIC,EAAMC,EAAOH,GACbI,EAAMD,EAAOF,GACbI,EAAMC,EAAON,GACbO,EAAMD,EAAOL,GACbO,EAAKC,EAAIP,EAAIE,GAAOK,EAAIJ,EAAIE,GAC5BG,EAAKD,EAAIP,EAAIK,GAAOE,EAAIJ,EAAID,GAChC,OAAO,IAAIO,EAAWF,EAAKD,GAAMC,EAAKC,GACvC,CCpBA,SAASE,EAAQV,EAAKG,EAAKD,EAAKG,EAAKM,EAAKC,EAAWC,GAGpD,OAFAF,EAAKE,GAAcN,EAAIP,EAAIE,GAAOK,EAAIJ,EAAIE,GAC1CM,EAAKE,EAAUD,GAAcL,EAAIP,EAAIK,GAAOE,EAAIJ,EAAID,GAC7CS,CACR,CCCA,SAASG,EAAShB,EAAIiB,EAAUC,EAAUjB,EAAIkB,EAAUC,EAAUP,EAAKC,EAAWC,GACjF,IAAIb,EAAMF,EAAIkB,GACVb,EAAML,EAAIkB,EAASD,GACnBb,EAAMH,EAAImB,GACVb,EAAMN,EAAImB,EAASD,GAGvB,OAFAN,EAAKE,GAAcN,EAAIP,EAAIE,GAAOK,EAAIJ,EAAIE,GAC1CM,EAAKE,EAAUD,GAAcL,EAAIP,EAAIK,GAAOE,EAAIJ,EAAID,GAC7CS,CACR,CCDAQ,EAAAC,EAAA,SAAAV,GACAS,EAAAC,EAAA,UAAAN"}